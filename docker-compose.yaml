volumes:
    db-data:
    back_dir:
    ssl-certificates:

secrets:
    db_password:
        file: ./.docker-secrets/db_password.txt
    backend_secret_key:
        file: ./.docker-secrets/backend_secret_key.txt
    backend_superuser_password:
        file: ./.docker-secrets/backend_superuser_password.txt


services:
    postgres-db:
        image: postgres:16.0
        environment:
            TZ: ${TZ}
            PGTZ: ${TZ}
            POSTGRES_PASSWORD_FILE: /run/secrets/db_password
            POSTGRES_USER: ${DB_USER}
            POSTGRES_DB: ${DB_NAME}
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
            interval: 30s
            timeout: 5s
            retries: 5
        volumes:
           - db-data:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        secrets:
          - db_password
    
    backend:
        image: '${DOCKER_IMAGE_BACKEND}:${TAG-latest}'
        build:
            context: ./backend
            dockerfile: Dockerfile   
        restart: always
        environment:
            - TZ=${TZ}
            - ENVIRONMENT=${ENVIRONMENT}
            - STACK_NAME=${STACK_NAME}
            - INNER_HOST=${INNER_HOST}
            #
            - DB_URI=${DB_URI}
            - SECRET_KEY_FILE=/run/secrets/backend_secret_key
            - DB_FIRST_SUPERUSER_PASSWORD_FILE=/run/secrets/backend_superuser_password
            - DB_PASSWORD_FILE=/run/secrets/db_password
            #
            - DB_FIRST_SUPERUSER=${DB_FIRST_SUPERUSER}
            - DB_USER=${DB_USER} 
            - DB_NAME=${DB_NAME}
            #
            - WEB_CONCURRENCY=1
            
        depends_on:
            postgres-db:
                condition: service_healthy
        volumes:
            - back_dir:/backend
        ports:
            - "8080:8080"
        secrets:
            - backend_secret_key
            - backend_superuser_password
            - db_password
        healthcheck:
            test: ["CMD", "curl", "-f", "http://0.0.0.0:8080/api/utils/health-check/"]
            interval: 30s
            timeout: 5s
            retries: 3

    nginx-proxy:
        image: '${DOCKER_IMAGE_NGINX}:${TAG-latest}'
        build: 
            context: ./nginx
            dockerfile: Dockerfile
        restart: always
        volumes:
            - ./nginx/default.conf:/tmp/default.conf
        environment: 
            - SERVER_NAME=`${STACK_NAME}.${DOMAIN}`
        ports:
            - "80:80"
        healthcheck:
            test: ["CMD-SHELL", "curl --silent --fail $${SERVER_NAME}:80/health-check || exit 1"]
            interval: 30s
            timeout: 5s
            retries: 3
        depends_on:
            backend:
                condition: service_healthy

    # alembic-run:
    #     image: '${DOCKER_IMAGE_BACKEND}:${TAG-latest}'
    #     build:
    #         context: ./backend
    #         dockerfile: Dockerfile   
    #     environment:
    #         - TZ=${TZ}
    #         - ENVIRONMENT=${ENVIRONMENT}
    #         - STACK_NAME=${STACK_NAME}
    #         - INNER_HOST=${INNER_HOST}
    #         - DB_URI=${DB_URI}
    #         - SECRET_KEY_FILE=/run/secrets/backend_secret_key
    #         - DB_FIRST_SUPERUSER_PASSWORD_FILE=/run/secrets/backend_superuser_password
    #         - DB_PASSWORD_FILE=/run/secrets/db_password
    #         - DB_FIRST_SUPERUSER=${DB_FIRST_SUPERUSER}
    #         - DB_USER=${DB_USER} 
    #         - DB_NAME=${DB_NAME}
    #         - WEB_CONCURRENCY=1
    #     depends_on:
    #         nginx-proxy:
    #             condition: service_healthy
    #     volumes:
    #         - back_dir:/backend
    #     expose:
    #         - 5000
    #     secrets:
    #         - backend_secret_key
    #         - backend_superuser_password
    #         - db_password
